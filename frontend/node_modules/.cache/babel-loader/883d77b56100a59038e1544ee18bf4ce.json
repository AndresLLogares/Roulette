{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport Ruleta from \"./Ruleta.json\";\n\nconst getBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const signerAddress = await signer.getAddress();\n      const ruleta = new Contract(Ruleta.address, Ruleta.abi, signer);\n      resolve({\n        signerAddress,\n        ruleta\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      ruleta: undefined\n    });\n  });\n});\n\nexport default getBlockchain;","map":{"version":3,"sources":["/home/andres/Casino-Eth/frontend/src/ethereum.js"],"names":["ethers","Contract","Ruleta","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","ruleta","address","abi","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,aAAa,GAAG,MAClB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,QAAGD,MAAM,CAACE,QAAV,EAAoB;AAChB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AACA,YAAMC,MAAM,GAAG,IAAIjB,QAAJ,CACXC,MAAM,CAACiB,OADI,EAEXjB,MAAM,CAACkB,GAFI,EAGXN,MAHW,CAAf;AAKAT,MAAAA,OAAO,CAAC;AAACW,QAAAA,aAAD;AAAgBE,QAAAA;AAAhB,OAAD,CAAP;AACH;;AACDb,IAAAA,OAAO,CAAC;AAACW,MAAAA,aAAa,EAAEK,SAAhB;AAA2BH,MAAAA,MAAM,EAAEG;AAAnC,KAAD,CAAP;AACH,GAdD;AAeH,CAhBD,CADJ;;AAmBA,eAAelB,aAAf","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport Ruleta from \"./Ruleta.json\";\n\nconst getBlockchain = () => \n    new Promise((resolve, reject) => {\n        window.addEventListener(\"load\", async () => {\n            if(window.ethereum) {\n                await window.ethereum.enable();\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = provider.getSigner();\n                const signerAddress = await signer.getAddress();\n                const ruleta = new Contract(\n                    Ruleta.address,\n                    Ruleta.abi,\n                    signer\n                );\n                resolve({signerAddress, ruleta});\n            }\n            resolve({signerAddress: undefined, ruleta: undefined})\n        })\n    })\n\nexport default getBlockchain;"]},"metadata":{},"sourceType":"module"}